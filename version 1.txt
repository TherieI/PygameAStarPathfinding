class AStarPathfinding:
    def __init__(self):
        pygame.init()

        self.display_size = (1000, 1000)
        self.grid_layout = (50, 50)

        self.screen = pygame.display.set_mode(self.display_size)
        self.clock = pygame.time.Clock()

        pygame.display.set_caption("A Star Pathfinding")

        # creating the grid with accessible rects
        self.grid = np.full(self.grid_layout, pygame.rect.Rect)
        self.rect_dim = (int(self.display_size[0]/self.grid_layout[0]), int(self.display_size[1]/self.grid_layout[1]))
        for x in range(0, self.grid_layout[0]):
            for y in range(0, self.grid_layout[1]):
                # pygame.rect.Rect((position), (width/length))
                tile = pygame.rect.Rect((x*self.rect_dim[0], y*self.rect_dim[1]), (self.rect_dim[0], self.rect_dim[1]))
                self.grid[x, y] = tile

    def run(self):
        while True:
            self.clock.tick(20)
            self.screen.fill((230, 230, 230))
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
            self.draw_grid()
            pygame.display.update()

    def draw_grid(self):
        for x in range(0, self.grid_layout[0]):
            for y in range(0, self.grid_layout[1]):
                pygame.draw.rect(self.screen, [255, 255, 255], self.grid[x, y], 1)




def main():
    simulation = AStarPathfinding()
    simulation.run()


if __name__ == '__main__':
    main()
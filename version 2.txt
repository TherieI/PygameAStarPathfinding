# --------------------------------------------------- pathfinding.py -------------------------------------------------------------
# refactored game class
import nodes
import pygame
import sys
from random import randint
import numpy as np


class Pathfinding:
    def __init__(self):
        print("Starting")
        pygame.init()

        self.display_size = (400, 400)
        self.grid_layout = (20, 20)

        self.screen = pygame.display.set_mode(self.display_size)
        self.clock = pygame.time.Clock()

        pygame.display.set_caption("dipaly")

        # initializing grid
        self.grid = np.full(self.grid_layout, nodes.Node)

        # setting all nodes to empty and creating the rects
        rect_width, rect_height = int(self.display_size[0]/self.grid_layout[0]), int(self.display_size[1]/self.grid_layout[1])
        for x, y in np.ndindex(self.grid.shape):
            # pygame.rect.Rect((position), (width/length))
            rect = pygame.rect.Rect(
                (x*rect_width, y*rect_height),
                (rect_width, rect_height)
            )
            self.grid[x, y] = nodes.Node(x, y, nodes.Contents.EMPTY, rect)

        # Start and end nodes
        grid_x, grid_y = self.grid_layout

        # writing start node
        start_rand_x, start_rand_y = randint(0, grid_x-1), randint(0, grid_y-1)
        self.grid[start_rand_x, start_rand_y].cont = nodes.Contents.START
        self.start_node = self.grid[start_rand_x, start_rand_y]

        # writing end node
        end_rand_x, end_rand_y = randint(0, grid_x-1), randint(0, grid_y-1)
        self.grid[end_rand_x, end_rand_y].cont = nodes.Contents.END
        self.end_node = self.grid[end_rand_x, end_rand_y]

    def run(self):
        while True:
            self.clock.tick(60)
            self.handle_events()
            self.draw()
            pygame.display.update()

    def handle_events(self):
        for event in pygame.event.get():
            mouse_pos = pygame.mouse.get_pos()
            if event.type == pygame.QUIT:  # you guessed it
                pygame.quit()
                sys.exit()
            elif pygame.mouse.get_pressed(5)[0]:  # adding wall
                for x, y in np.ndindex(self.grid.shape):  # iterating using np (gaming)
                    if self.grid[x, y].rect.collidepoint(mouse_pos):
                        if not self.is_point_node(self.grid[x, y]):
                            self.grid[x, y].cont = nodes.Contents.WALL

            elif  pygame.mouse.get_pressed(5)[2]: # removing wall
                for x, y in np.ndindex(self.grid.shape):
                    if self.grid[x, y].rect.collidepoint(mouse_pos):
                        if not self.is_point_node(self.grid[x, y]):
                            self.grid[x, y].cont = nodes.Contents.EMPTY

    def draw(self):
        self.screen.fill((230, 230, 230))
        self.draw_nodes()

    def draw_nodes(self): # will draw all the nodes
        for x, y in np.ndindex(self.grid.shape):
            node = self.grid[x, y]
            pygame.draw.rect(
                self.screen,
                nodes.Palette.get_color(node.cont),
                node.rect,
                width = 1 if node.cont == nodes.Contents.EMPTY else 0
            )

    def is_point_node(self, n): # checks if the node is a start or end node
        return self.start_node == n or self.end_node == n

# --------------------------------------------------- nodes.py -------------------------------------------------------------
from dataclasses import dataclass, field
from enum import Enum
import pygame


class Contents(Enum):
    START = 1
    END = 2
    WALL = 3
    EMPTY = 4


class Palette:
    RED = (255, 0, 0)
    GREEN = (0, 255, 0)
    LIGHTGREY = (230, 230, 230)
    DARKGREY = (100, 100, 100)
    WHITE = (255, 255, 255)

    @staticmethod
    def get_color(cont: Contents):
        if cont == Contents.START:
            return Palette.GREEN
        elif cont == Contents.END:
            return Palette.RED
        elif cont == Contents.WALL:
            return Palette.DARKGREY
        elif cont == Contents.EMPTY:
            return Palette.WHITE


@dataclass
class Node:
    """Immutable XY Coordinate tracker"""
    x: int
    y: int
    cont: Contents = field(compare = False)
    rect: pygame.rect.Rect
